1. Intro - Innovations in React and Flux
===================

* Unique qualities React has to offer:
  - JSX - writing markup (HTML) in JavaScript.
  - Virtual DOM - minimizes expensive updates to the DOM. React => Virtual DOM => DOM.
                When UI changes, React compares the old state with the new state in memory and ten updates the DOM in the least expensive way.
  - Isomorphic Rendering - allows to render the React components on both Client and Server.
  - Unidirectional Flows (Flux) - data flows are handled in a single direction using the centralized dispatcher.

* React and Flux deliberately ignore some commonly held best practices:
  - HTML should be a projection of app state, not a source of truth, i.e. data shouldn't be stored in DOM.
  - JavaScript and HTML belong in the same file (JSX).
  - Unidirectional flow. No two-way binding.
  - Inline styles can be good.



2. Environment Setup
===================

>npm init
>npm install --save gulp@3.9.0 gulp-connect@2.2.0 gulp-open@1.0.0
>npm install --save browserify@11.0.1 reactify@1.1.1 vinyl-source-stream@1.1.0
>npm install --save bootstrap@3.3.5 jquery@2.1.4 gulp-concat@2.6.0
>npm install --save gulp-eslint@0.15.0
>npm install --save react@0.13.3 react-router@0.13.3 flux@2.0.3
>npm install --save lodash
>npm run gulp


package.json
----
{
  "name": "react-flux-building-applications",
  "version": "1.0.0",
  "description": "Building Applications with React and Flux Pluralsight course by Cory House",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "gulp": "gulp"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/RockingChewee/react-flux-building-applications.git"
  },
  "author": "Aleksandr Fokin",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/RockingChewee/react-flux-building-applications/issues"
  },
  "homepage": "https://github.com/RockingChewee/react-flux-building-applications#readme",
  "dependencies": {
    "bootstrap": "^3.3.5",
    "browserify": "^11.0.1",
    "flux": "^2.0.3",
    "gulp": "^3.9.0",
    "gulp-concat": "^2.6.0",
    "gulp-connect": "^2.2.0",
    "gulp-eslint": "^0.15.0",
    "gulp-open": "^1.0.0",
    "jquery": "^2.1.4",
    "lodash": "^4.17.4",
    "react": "^0.13.3",
    "react-router": "^0.13.3",
    "reactify": "^1.1.1",
    "vinyl-source-stream": "^1.1.0"
  }
}


gulpfile.js
----
"use strict";

var gulp = require('gulp');
var connect = require('gulp-connect'); // Runs a local dev server
var open = require('gulp-open'); // Opens a URL in a web browser
var browserify = require('browserify'); // Bundles JS, uses CommonJS package pattern
var reactify = require('reactify'); // Transforms React JSX to JS
var source = require('vinyl-source-stream'); // Use conventional text streams with Gulp
var concat = require('gulp-concat'); // Concatinates files
var lint = require('gulp-eslint'); // Lint JS files, including JSX

var config = {
    devBaseUrl: 'http://localhost',
    port: 9005,
    paths: {
        html: './src/*.html',
        js: './src/**/*.js',
        css: [
          'node_modules/bootstrap/dist/css/bootstrap.min.css',
          'node_modules/bootstrap/dist/css/bootstrap-theme.min.css'
        ],
        dist: './dist',
        mainJs: './src/main.js'
    }
}

// Start a local development server
gulp.task('connect', function() {
  connect.server({
    root: ['dist'],
    base: config.devBaseUrl,
    port: config.port,
    livereload: true
  });
});

gulp.task('open', ['connect'], function() {
  gulp.src('dist/index.html')
    .pipe(open({ uri: config.devBaseUrl + ':' + config.port + '/'}));
});

gulp.task('html', function() {
  gulp.src(config.paths.html)
    .pipe(gulp.dest(config.paths.dist))
    .pipe(connect.reload());
});

gulp.task('js', function() {
  browserify(config.paths.mainJs)
    .transform(reactify)
    .bundle()
    .on('error', console.error.bind(console))
    .pipe(source('bundle.js'))
    .pipe(gulp.dest(config.paths.dist + '/scripts'))
    .pipe(connect.reload());
});

gulp.task('css', function() {
  gulp.src(config.paths.css)
    .pipe(concat('bundle.css'))
    .pipe(gulp.dest(config.paths.dist + '/css'));
});

gulp.task('lint', function() {
  return gulp.src(config.paths.js)
    .pipe(lint({config: 'eslint.config.json'}))
    .pipe(lint.format());
});

gulp.task('watch', function() {
  gulp.watch(config.paths.html, ['html']);
  gulp.watch(config.paths.js, ['js', 'lint']);
});

gulp.task('default', ['html', 'js', 'css', 'lint', 'open', 'watch']);


index.HTML
----
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Pluralsight Administration</title>
    <link rel="stylesheet" href="css/bundle.css" />
  </head>
  <body>
    <div class="jumbotron">
      <h1>Hello world from Bootstrap</h1>
    </div>
    <div id="app"></div>
    <script src="scripts/bundle.js"></script>
  </body>
</html>


main.js
----
$ = jQuery = require('jquery'); // Bootstrap expects jquery to be in a global namespace

var App = console.log('Hello world from Browserify');

module.exports = App;


eslint.config.json - http://github.com/coryhouse/react-flux-starter-kit/blob/master/eslint.config.json
----
{
  "root": true,
  "ecmaFeatures": {
    "jsx": true
  },
  "env": {
    "browser": true,
    "node": true,
    "jquery": true
  },
  "rules": {
    "quotes": 0,
    "no-trailing-spaces": 0,
    "eol-last": 0,
    "no-unused-vars": 0,
    "no-underscore-dangle": 0,
    "no-alert": 0,
    "no-lone-blocks": 0
  },
  "globals": {
    "jQuery": true,
    "$": true
  }
}


.editorconfig
----
#editorconfig.org
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.md]
trim_trailing_whitespace = false



3. React Core Concepts
===================

* Why React?
  - Fast - Virtual DOM
  - Composable - nested components, data passing via props
  - Pluggable - easily integrated with other technologies
  - Isomorphic Friendly - rendering may happen on both client or server
  - Simple - API is small and moving parts are not a lot
  - Battle Proven - used by Facebook and lot of others

* React and MVC
  - In actuality, a well composed React components fulfil both V and C, called Controller Views.
    Controller Views promote reuse and separation of concern.

* The risk of two-way binding (used by alternatives e.g. Knockout, Angular, ember)

  Simply put, when UI change, a corresponding model change needs to be triggered and vise versa - a model change needs to be reflected in UI.
  These are hard to predict and follow in a complex applications.

  - Pros
    ~ Simple way to eliminate boiler plate
    ~ Quickly deliver applications

  - Cons
    ~ Unpredictable interactions
    ~ Cascading updates
    ~ Tricky debugging

* JSX
  - "HTML" in JavaScript - this is not actual HTML, but it compiles down to JavaScript, which produces HTML
  - Defferences: 'className' instead of 'class', 'htmlFor' instead of 'for'
  - Optional - there is no enforcement to use it, can just use JavaScript instead
  - Example: <h1 color="red">Heading here</h1>  ==> React.createElement("h1", {color: red}, "Heading here")
  - JSX-friendly editors: Sublime (plugin), WebStorm, Brackets, Atom, Visual Studio 2015, VSCode

* HTML in JS: A Justification
  - The popular mindset is to inject JS into HTML (Knockout, Angular, ember) and React does the exact opposite - injects HTML into JS.
    In other words, from architecture point of view this is not very different.
  - HTML and JS must be carefully kept in sync, but there is no explicit interface between HTML and JavaScript to with regards to separation of concerns.
  - In JS we enjoy the clear error messages, which point us to the line number where the error occurred, but HTML usually silently fails.
  - The conclusion is that HTML and JS are totally intertwined concerns and putting them into separate files fails to really separate them.

* Understanding of Virtual DOM

  - Story:
    It is a lot of work for photo-stage setup to put all the lights to the correct spot. When the setup slightly changes, it is much more efficient
    to just move some lights around, rather than tearing them down and blindly rebuilding the stage from scratch.

  - Behind the scenes:
    ~ React compares the current state of the DOM to the new desired state and determines the most efficient way to update the physical DOM.
    ~ The comparison happens in-memory, so it is typically very fast.
    ~ React monitors each component state.

  - Performance tweaks:
    ~ By declaring shouldComponentUpdate() method in React components, which may contain manual logic considering whether to update the DOM even if the model changes.
    ~ PureRenderMixin + immutability - allows reference comparisons
    ~ Synthetic Events - React may optimize the way event handlers are attached behind the scenes
    ~ Isomorphic Support - rendering may be done on a server (will not be covered in this course)
    ~ React Native - since React abstracts the DOM, it can be used for Native (mobile) applications (will not be covered in this course)



4. Creating React Components
===================

* Creating of React component in ES5: React.createClass() {}
* Each react component has to have a render() function. This function returns the JSX that is to be visible on the screen.
  This function may not return 2 elements on the top level, i.e. if 2 are needed - those must be wrapped into single top level element, e.g. div.
* The React.render() has to be invoked in the main js file in order to inject the React components into main html.
  This method accepts the component name that is the highest in hierarchy and a DOM element, to which this component needs to be attached to.
* To workaround the defining of the jquery variable in the global namespace and usage of 'use strict' the IIFE can be used.
  In this case, the main js logic is wrapped into the IIFE and the first line inside the IIFE is 'use strict'.
  IIFE - an Immediately-Invoked Function Expression, which executes immediately after it’s created and  looks like (function(){...})().
* Naming React Files:
  - ChatApp.react.js
  - ChatApp.jsx
  - ChatApp.js
  Preferable approach is to use .js extension, since this appears to be least confusing for the operating systems and JS IDE's to correctly recognize those files.


src/components/homePage.js
----
"use strict";

var React = require('react');

var Home = React.createClass({
  render: function() {
    return (
      <div className="jumbotron">
        <h1>Pluralsight Administration</h1>
        <p>React, React Router, and Flux for ultra-responsive web apps.</p>
      </div>
    );
  }
});

module.exports = Home;


src/main.js
----
//"use strict"; // Cannot 'use strict' here due to the need of having the jquery variable in a global namespace. This is workarounded by using IIFE.
$ = jQuery = require('jquery'); // Bootstrap expects jquery to be in a global namespace

var React = require('react');
var Home = require('./components/homePage');
var About = require('./components/about/aboutPage');
var Header = require('./components/common/header');

(function(win) { // an IIFE to workaround the 'use strict' and jquery global variable collision

  "use strict";

  var App = React.createClass({
    render: function() {
      var Child;
      switch(this.props.route) { // capturing the attribute values passed over by the parent component (this.props)
        case 'about': Child = About; break;
        default: Child = Home;
      }

      return (
        <div>
          <Header/>
          <Child/>
        </div>
      );
    }
  });

  function render() {
    var route = win.location.hash.substr(1); // 'window' to 'win', since 'win' is passed to the IIFE
    React.render(<App route={route} />, document.getElementById('app')); // passing props to the child component
  }

  win.addEventListener('hashchange', render); // Event that occurres when there is a hash change in the URL, e.g. http://localhost:9005/#about
  render();

})(window);


src/index.html
----
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Pluralsight Administration</title>
    <link rel="stylesheet" href="css/bundle.css" />
  </head>
  <body>
    <div id="app"></div>
    <script src="scripts/bundle.js"></script>
  </body>
</html>


src/about/aboutPage.js
----
"use strict";

var React = require('react');

var Home = React.createClass({
  render: function() {
    return (
      <div className="jumbotron">
        <h1>About</h1>
        <p>
          This application uses the following technologies:
          <ul>
            <li>React</li>
            <li>React Router</li>
            <li>Flux</li>
            <li>Node</li>
            <li>Gulp</li>
            <li>Browserify</li>
            <li>Bootstrap</li>
          </ul>
        </p>
      </div>
    );
  }
});

module.exports = Home;


src/components/common/header.js
----
"use strict";

var React = require('react');

var Header = React.createClass({
  render: function() {
    return (
      <nav className="navbar navbar-default">
        <div className="container-fluid">
          <a href="/" className="navbar-brand">
            <img src="images/pluralsight-logo.png" />
          </a>
          <ul className="nav navbar-nav">
            <li><a href="/">Home</a></li>
            <li><a href="/#about">About</a></li>
          </ul>
        </div>
      </nav>
    );
  }
});

module.exports = Header;


src/images/pluralsight-logo.png
----


favicon.ico
----


gulpfile.js
----
...
var config = {
    ...
    paths: {
        ...
        images: './src/images/*',
        ...
    }
}
...
// Migrates images to dist folder
// Note that I could even optimize my images here
gulp.task('images', function() {
  gulp.src(config.paths.images)
    .pipe(gulp.dest(config.paths.dist + '/images'))
    .pipe(connect.reload());

  //publish favicon
  gulp.src('./src/favicon.ico')
    .pipe(gulp.dest(config.paths.dist)); // this is where browsers usually request favicon.ico from (the root of the website)
});



5. React Lifecycle
===================

* Data of React components is held in 2 places:
  - Props - this.props.username
    ~ Used to pass the data down to the child components. Look like HTML attributes, but immutable, i.e. owned by the parent.
    ~ getDefaultProps() - an optional function which can be used to define values for properties of the component in case parent component doesn't declare the values.
  - State - this.state.username
    ~ Holds mutable state of the React component.
      Strive to use it only in the Controller View, i.e. only use state on a top level component and pass data down to child components via props.
    ~ getInitialState() - an optional function which sets the initial state for the component, typically in the top level component called Controller View.

* React Component Lifecycle:
  - componentWillMount
    When: Before initial render, both client and server.
    Why: Good spot to set initial state.
  - componentDidMount
    When: After render, i.e. by this time the component is rendered in the DOM.
    Why: Access DOM, integrate with frameworks, set timers, AJAX requests.
  - componentWillReceiveProps
    When: When receiving new props, i.e. when properties are chaged. Not called on initial render.
    Why: Set state before the next render.
  - shouldComponentUpdate
    When: Immediately before render when the new props or state are being received. Not called on initial render.
    Why: Performance. Return false to avoid unnecessary re-renders, e.g. when the data change doesn't affect the DOM.
  - componentWillUpdate
    When: Immediately before rendering when new props or state are being received. Not called on initial render.
    Why: Prepare for an update. Can't call setState() in this function.
  - componentDidUpdate
    When: After component's updates are flushed to the DOM, i.e. when the component was re-rendered. Not called on initial render.
    Why: Work with the DOM after an update.
  - componentWillUnmount
    When: Immediately before component is removed from DOM.
    Why: Cleanup. Destroying any redundant resources or elements that were created when the component was mounted.

* Keys for Dynamic Children - <tr key={author.id}>
  When creating multiple child components dynamically, e.g. rows in a table, you need to provide a key for each child component, which is used by React to ensure the
  other child components are properly re-ordered or destroyed. This is often the primary key for the corresponding database record, but it need not to be.


src/api/authorApi.js - http://bit.ly/authorapi
----
"use strict";

//This file is mocking a web API by hitting hard coded data.
var authors = require('./authorData').authors;
var _ = require('lodash');

//This would be performed on the server in a real app. Just stubbing in.
var _generateId = function(author) {
  return author.firstName.toLowerCase() + '-' + author.lastName.toLowerCase();
};

var _clone = function(item) {
  return JSON.parse(JSON.stringify(item)); //return cloned copy so that the item is passed by value instead of by reference
};

var AuthorApi = {
  getAllAuthors: function() {
    return _clone(authors);
  },

  getAuthorById: function(id) {
    var author = _.find(authors, {id: id});
    return _clone(author);
  },

  saveAuthor: function(author) {
    //pretend an ajax call to web api is made here
    console.log('Pretend this just saved the author to the DB via AJAX call...');

    if (author.id) {
      var existingAuthorIndex = _.indexOf(authors, _.find(authors, {id: author.id}));
      authors.splice(existingAuthorIndex, 1, author); // splice(index, how many items to remove, item n to add)
    } else {
      //Just simulating creation here.
      //The server would generate ids for new authors in a real app.
      //Cloning so copy returned is passed by value rather than by reference.
      author.id = _generateId(author);
      authors.push(author);
    }

    return _clone(author);
  },

  deleteAuthor: function(id) {
    console.log('Pretend this just deleted the author from the DB via an AJAX call...');
    _.remove(authors, { id: id});
  }
};

module.exports = AuthorApi;


src/api/authorData.js - http://bit.ly/authorapidata
----
module.exports = {
  authors:
  [
    {
      id: 'cory-house',
      firstName: 'Cory',
      lastName: 'House'
    },
    {
      id: 'scott-allen',
      firstName: 'Scott',
      lastName: 'Allen'
    },
    {
      id: 'dan-wahlin',
      firstName: 'Dan',
      lastName: 'Wahlin'
    }
  ]
};


src/components/authors/authorPage.js
----
"use strict";

var React = require('react');
var AuthorApi = require('../../api/authorApi');

var Authors = React.createClass({

  getInitialState: function() {
    return {
      authors: []
    };
  },

  componentWillMount: function() {
    this.setState({ authors: AuthorApi.getAllAuthors() });
  },

  render: function() {

    var createAuthorRow = function(author) {
      return (
        <tr>
          <td><a href={"/#authors/" + author.id}>{author.id}</a></td>
          <td>{author.firstName} {author.lastName}</td>
        </tr>
      );
    };

    return (
      <div className="jumbotron">
        <h1>Authors</h1>
        <table className="table">
          <thead>
            <th>ID</th>
            <th>Name</th>
          </thead>
          <tbody>
            {this.state.authors.map(createAuthorRow, this)}
          </tbody>
        </table>
      </div>
    );
  }
});

module.exports = Authors;


main.js
----
...
var Authors = require('./components/authors/authorPage');
...
      case 'authors' : Child = Authors; break;
...


src/components/common/header.js
----
...
            <li><a href="/#authors">Authors</a></li>
...



6. React Composition
===================

* Controller View
  - top level component
  - sets props on children
  - interacts with stores (flux, redux)
  - can have nested Controller Views, but it is not recommended, since there might be multiple render() invocations

* Prop Validation
  - Each PropTypes that isn't required, should have a corresponding field in getDefaultProps()
  - PropTypes only run in the development version of React (the non-minified one), i.e. there is a special production build of React
  - Examples:
    optionalArray: React.PropTypes.array
    optionalBool: React.PropTypes.bool,
    optionalFunc: React.PropTypes.func,
    optionalNumber: React.PropTypes.number,
    optionalObject: React.PropTypes.optionalObject,
    optionalString: React.PropTypes.string,
    requiredString: React.PropTypes.string.isRequired

* Mixins
  - For handling cross-cutting functionality
  - Share code between multiple components
  - 'mixins' is a special property in the React components
  - Example:
    var ManageAuthorPage = React.createClass({
      mixins: [
        Router.Navigation,
        Router.State,
      ],
    ...
    });


src/components/authors/authorList.js
----
"use strict";

var React = require('react');

var AuthorList = React.createClass({

  propTypes: {
    authors: React.PropTypes.object.isRequired
  },

  render: function() {

    var createAuthorRow = function(author) {
      return (
        <tr>
          <td><a href={"/#authors/" + author.id}>{author.id}</a></td>
          <td>{author.firstName} {author.lastName}</td>
        </tr>
      );
    };

    return (
      <div className="jumbotron">
        <table className="table">
          <thead>
            <th>ID</th>
            <th>Name</th>
          </thead>
          <tbody>
            {this.props.authors.map(createAuthorRow, this)}
          </tbody>
        </table>
      </div>
    );
  }
});

module.exports = AuthorList;


src/components/authors/authorPage.js
----
"use strict";

var React = require('react');
var AuthorApi = require('../../api/authorApi');
var AuthorList = require('./authorList');

var AuthorPage = React.createClass({

  getInitialState: function() {
    return {
      authors: []
    };
  },

  componentDidMount: function() {
    if (this.isMounted()) {
      this.setState({ authors: AuthorApi.getAllAuthors() });
    }
  },

  render: function() {

    var createAuthorRow = function(author) {
      return (
        <tr>
          <td><a href={"/#authors/" + author.id}>{author.id}</a></td>
          <td>{author.firstName} {author.lastName}</td>
        </tr>
      );
    };

    return (
      <div className="jumbotron">
        <h1>Authors</h1>
        <AuthorList authors={this.state.authors} />
      </div>
    );
  }
});

module.exports = AuthorPage;



7. React Router
===================
